import tkinter as tk
from tkinter import filedialog, messagebox
import time
import urllib.parse

class ComboExtractorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Combo Extractor")
        self.root.configure(bg="black")
        
        self.ulp_lines = []        # List of URLs from ULP file
        self.request_sites = []    # List of request sites
        
        self.create_widgets()
    
    def create_widgets(self):
        self.load_ulp_btn = tk.Button(self.root, text="Load ULP", command=self.load_ulp,
                                      bg="red", fg="white", width=20)
        self.load_ulp_btn.pack(pady=5)
        
        self.load_req_btn = tk.Button(self.root, text="Load Requests", command=self.load_requests,
                                      bg="red", fg="white", width=20)
        self.load_req_btn.pack(pady=5)
        
        self.format_label = tk.Label(self.root, text="Select Credential Format:",
                                     bg="black", fg="white")
        self.format_label.pack(pady=5)
        
        self.format_var = tk.StringVar(value="mail:pass")
        formats = ["mail:pass", "user:pass", "login:pass"]
        self.format_menu = tk.OptionMenu(self.root, self.format_var, *formats)
        self.format_menu.configure(bg="red", fg="white")
        self.format_menu.pack(pady=5)
        
        self.start_btn = tk.Button(self.root, text="Start", command=self.start_extraction,
                                   bg="red", fg="white", width=20)
        self.start_btn.pack(pady=10)
        
        self.results_text = tk.Text(self.root, height=12, bg="white", fg="black")
        self.results_text.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
    
    def load_ulp(self):
        filename = filedialog.askopenfilename(title="Select ULP File", filetypes=[("Text Files", "*.txt")])
        if filename:
            try:
                with open(filename, "r", encoding="utf-8") as f:
                    self.ulp_lines = [line.strip() for line in f if line.strip()]
                messagebox.showinfo("ULP Loaded", f"Loaded {len(self.ulp_lines)} URLs from ULP file.")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to load ULP file:\n{e}")
    
    def load_requests(self):
        filename = filedialog.askopenfilename(title="Select Requests File", filetypes=[("Text Files", "*.txt")])
        if filename:
            try:
                with open(filename, "r", encoding="utf-8") as f:
                    self.request_sites = [line.strip().lower() for line in f if line.strip()]
                messagebox.showinfo("Requests Loaded", f"Loaded {len(self.request_sites)} request sites.")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to load Requests file:\n{e}")
    
    def start_extraction(self):
        if not self.ulp_lines:
            messagebox.showwarning("Warning", "Please load a ULP file first.")
            return
        if not self.request_sites:
            messagebox.showwarning("Warning", "Please load a Requests file first.")
            return
        
        selected_format = self.format_var.get()
        start_time = time.time()
        total_lines = len(self.ulp_lines)
        error_lines = 0
        
        # Dictionary to store results per site.
        results = {}  # Format: { site: {"found": int, "duplicates": int, "unique": set(), "combos": [list] } }
        
        for line in self.ulp_lines:
            try:
                parsed = urllib.parse.urlparse(line)
            except Exception:
                error_lines += 1
                continue
            
            netloc = parsed.netloc.lower()
            matched = False
            site_key = ""
            for req in self.request_sites:
                if req in netloc:
                    matched = True
                    site_key = req
                    break
            if not matched:
                error_lines += 1
                continue
            
            # Attempt to extract credential using the path.
            cred = parsed.path
            if not cred or cred == "/":
                # Fallback: extract what comes after the domain from the original URL.
                # Remove scheme and netloc from the URL.
                prefix = f"{parsed.scheme}://{parsed.netloc}"
                cred = line[len(prefix):].lstrip("/?")  # Remove leading slashes or question marks
            
            # Final cleanup: if there are still multiple parts split by '/', take the last part.
            if "/" in cred:
                cred = cred.split("/")[-1]
            
            # Validate credential based on the selected format (simple check: should contain exactly one colon).
            parts = cred.split(":")
            if selected_format in ["mail:pass", "user:pass", "login:pass"] and len(parts) != 2:
                error_lines += 1
                continue
            
            # Record credential under the matching site.
            if site_key not in results:
                results[site_key] = {"found": 0, "duplicates": 0, "unique": set(), "combos": []}
            results[site_key]["found"] += 1
            if cred in results[site_key]["unique"]:
                results[site_key]["duplicates"] += 1
            else:
                results[site_key]["unique"].add(cred)
                results[site_key]["combos"].append(cred)
        
        end_time = time.time()
        time_taken = end_time - start_time
        
        # Write out unique credentials to separate files.
        for site, data in results.items():
            if data["unique"]:
                try:
                    with open(f"{site}_combos.txt", "w", encoding="utf-8") as f:
                        for combo in data["combos"]:
                            f.write(combo + "\n")
                except Exception as e:
                    messagebox.showerror("Error", f"Failed to write file for {site}:\n{e}")
        
        summary = ""
        for site, data in results.items():
            summary += f"Request: {site}\n"
            summary += f"   Found: {data['found']}\n"
            summary += f"   Duplicate: {data['duplicates']}\n"
            summary += f"   Final Output: {len(data['unique'])}\n\n"
        summary += f"Total lines found: {total_lines}\n"
        summary += f"Error lines: {error_lines}\n"
        summary += f"Time taken: {time_taken:.2f} seconds\n"
        
        self.results_text.delete(1.0, tk.END)
        self.results_text.insert(tk.END, summary)
        messagebox.showinfo("Extraction Completed", "Extraction complete! Check the results and generated files.")

if __name__ == "__main__":
    root = tk.Tk()
    app = ComboExtractorGUI(root)
    root.mainloop()
